---
#
##
### Query LDAP.
##
#
- name: 'Get subgroups with version number form the ldap cache.'
  shell: |
    ldapsearch -LLL -D '{{ ldap_binddn }}' -w '{{ bindpw }}' -b '{{ ldap_base }}' -H 'ldap://{{ uri_ldap }}' \
        "(ObjectClass=GroupofNames)" dn \
      | tr "=," "\n" \
      | fgrep "{{ group }}" \
      | grep -v "^{{ group }}$" \
      | grep -- "-v[0-9][0-9]*$" \
      || true
  register: versioned_subgroups

- name: 'Create list of versioned subgroups.'
  set_fact:
    versioned_subgroups_list: "{% if versioned_subgroups.stdout | length %}{{ versioned_subgroups.stdout.split('\n') | list }}{% endif %}"

- name: 'Get subgroups without version number form the ldap cache.'
  shell: |
    ldapsearch -LLL -D '{{ ldap_binddn }}' -w '{{ bindpw }}' -b '{{ ldap_base }}' -H 'ldap://{{ uri_ldap }}' \
        "(ObjectClass=GroupofNames)" dn \
        | tr "=," "\n" \
        | fgrep "{{ group }}" \
        | grep -v "^{{ group }}$" \
        | grep -v -- "-v[0-9][0-9]*$" \
        || true
  register: unversioned_subgroups

- name: 'Create list of unversioned subgroups.'
  set_fact:
    unversioned_subgroups_list: "{% if unversioned_subgroups.stdout | length %}{{ unversioned_subgroups.stdout.split('\n') | list }}{% endif %}"
#
##
### Create projects and releases folders in which the subgroup dirs will be created.
##
#
- name: 'Create "[tmp*|prm*]/projects" directory.'
  file:
    path: "/groups/{{ group }}/{{ lfs }}/projects/"
    owner: "{{ group }}-dm"
    group: "{{ group }}"
    mode: "{{ mode_project }}"
    state: 'directory'
  when: unversioned_subgroups_list | length > 0
  become: true
  become_user: "{{ group }}-dm"

- name: 'Create "[tmp*|prm*]/releases" directory.'
  file:
    path: "/groups/{{ group }}/{{ lfs }}/releases/"
    owner: "{{ group }}-dm"
    group: "{{ group }}"
    mode: "{{ mode_dataset }}"
    state: 'directory'
  when: versioned_subgroups_list | length > 0
  become: true
  become_user: "{{ group }}-dm"
#
##
### Create subgroup dirs.
##
#
- name: 'Create "[tmp*|prm*]/releases/${dataset}" directory structure for subgroups with version number.'
  file:
    path: "/groups/{{ group }}/{{ lfs }}/releases/{{ item | regex_replace('^' + group + '-(.*)-(v[0-9][0-9]*)$', '\\1') }}"
    owner: "{{ group }}-dm"
    group: "{{ group }}"
    mode: "{{ mode_dataset }}"
    state: 'directory'
  with_items: "{{ versioned_subgroups_list }}"
  when: versioned_subgroups_list | length > 0
  become: true
  become_user: "{{ group }}-dm"
  
- name: 'Create "[tmp*|prm*]/releases/${dataset}/${version}" directory structure for subgroups with version number.'
  file:
    path: "/groups/{{ group }}/{{ lfs }}/releases/{{ item | regex_replace('^' + group + '-(.*)-(v[0-9][0-9]*)$', '\\1') }}/{{ item | regex_replace('^' + group + '-(.*)-(v[0-9][0-9]*)$', '\\2') }}"
    owner: "{{ group }}-dm"
    group: "{% if item | length %}{{ item }}{% else %}{{ group }}{% endif %}"
    mode: "{{ mode_version }}"
    state: 'directory'
  with_items: "{{ versioned_subgroups_list }}"
  when: versioned_subgroups_list | length > 0
  become: true
  become_user: "{{ group }}-dm"
  ignore_errors: yes # Continue of this specific subgroup failed and try to create other subgroup folders.

- name: 'Create "[tmp*|prm*]/projects/${project}" directory structure for subgroups without version number.'
  file:
    path: "/groups/{{ group }}/{{ lfs }}/projects/{{ item | regex_replace('^' + group + '-(.*)$', '\\1') }}"
    owner: "{{ group }}-dm"
    group: "{% if item | length %}{{ item }}{% else %}{{ group }}{% endif %}"
    mode: "{{ mode_project }}"
    state: 'directory'
  with_items: "{{ unversioned_subgroups_list }}"
  when: unversioned_subgroups_list | length > 0
  become: true
  become_user: "{{ group }}-dm"
  ignore_errors: yes # Continue of this specific subgroup failed and try to create other subgroup folders.
...
