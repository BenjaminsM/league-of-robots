ClusterName={{ slurm_cluster_name }}
ControlMachine="{{ hostvars[groups['slurm'][0]]['ansible_hostname'] }}"
ControlAddr="{{ hostvars[groups['slurm'][0]]['ansible_hostname'] }}"
#BackupController=
#BackupAddr=
#
SlurmUser=slurm
SlurmctldPort=6817
SlurmdPort=6818
AuthType=auth/munge
#JobCredentialPrivateKey=
#JobCredentialPublicCertificate=
StateSaveLocation=/var/spool/slurm
SlurmdSpoolDir=/var/spool/slurmd
SwitchType=switch/none
MpiDefault=none
MpiParams=ports=12000-12999
SlurmctldPidFile=/var/run/slurmctld.pid
SlurmdPidFile=/var/run/slurmd.pid
ProctrackType=proctrack/cgroup
#PluginDir=
CacheGroups=0
#FirstJobId=
ReturnToService=1
#MaxJobCount=
#PlugStackConfig=
#PropagatePrioProcess=
#PropagateResourceLimits=
#PropagateResourceLimitsExcept=
Prolog=/etc/slurm/slurm.prolog
PrologFlags=Alloc
Epilog=/etc/slurm/slurm.epilog*
#SrunProlog=
#SrunEpilog=
TaskProlog=/etc/slurm/slurm.taskprolog
#TaskEpilog=/etc/slurm/slurm.taskepilog
TaskPlugin=task/cgroup
JobSubmitPlugins=lua
#TrackWCKey=no
#TreeWidth=50
TmpFS=/local
#UsePAM=
#CheckpointType=checkpoint/blcr
#JobCheckpointDir=/var/slurm/checkpoint
# Terminate job immediately when one of the processes is crashed or aborted.
KillOnBadExit=1
# Automatically requeue jobs after a node failure or preemption by a higher prio job.
JobRequeue=1
# Cgroups already enforce resource limits, SLURM should not do this
MemLimitEnforce=no
#
# TIMERS
#
SlurmctldTimeout=300
SlurmdTimeout=300
MessageTimeout=60
GetEnvTimeout=20
InactiveLimit=0
MinJobAge=300
KillWait=30
Waittime=15
#
# SCHEDULING
#
SchedulerType=sched/backfill
SchedulerPort=7321
SchedulerParameters=kill_invalid_depend,bf_continue,bf_max_job_test=10000,bf_max_job_user=5000,default_queue_depth=500,bf_window=10080,bf_resolution=300,preempt_reorder_count=100
SelectType=select/cons_res
SelectTypeParameters=CR_Core_Memory
#SchedulerAuth=
#SchedulerRootFilter=
FastSchedule=1
PriorityType=priority/multifactor
PriorityDecayHalfLife=3-0
PriorityFavorSmall=NO
# Not necessary if there is a decay
#PriorityUsageResetPeriod=14-0
PriorityWeightAge=1000
PriorityWeightFairshare=100000
PriorityWeightJobSize=0
PriorityWeightPartition=0
PriorityWeightQOS=1000000
PriorityMaxAge=14-0
PriorityFlags=ACCRUE_ALWAYS,FAIR_TREE
PreemptType=preempt/qos
PreemptMode=REQUEUE
#
# Reservations
#
#ResvOverRun=UNLIMITED
#
# LOGGING
#
SlurmctldDebug=3
SlurmctldLogFile=/var/log/slurm/slurmctld.log
SlurmdDebug=3
SlurmdLogFile=/var/log/slurm/slurmd.log
JobCompType=jobcomp/filetxt
JobCompLoc=/var/log/slurm/slurm.jobcomp
#
# ACCOUNTING
#
#AcctGatherEnergyType=acct_gather_energy/rapl
#JobAcctGatherFrequency=energy=30
JobAcctGatherType=jobacct_gather/linux
JobAcctGatherParams=UsePss,NoOverMemoryKill
# Users have to be in the accounting database
# (otherwise we don't have accounting records and fairshare)
AccountingStorageEnforce=limits,qos # will also enable: associations
#AcctGatherProfileType=acct_gather_profile/hdf5
#JobAcctGatherFrequency=30
AccountingStorageType=accounting_storage/slurmdbd
AccountingStorageHost="{{ hostvars[groups['slurm'][0]]['ansible_hostname'] }}"
#AccountingStorageLoc=/var/log/slurm/slurm.accounting
#AccountingStoragePass=
#AccountingStorageUser=
MaxJobCount=100000
#
# Node Health Check (NHC)
#
HealthCheckProgram=/usr/sbin/nhc
HealthCheckInterval=300
#
{{ nodes }}
