#
#   1.   $> cd git/league-of-robots
# Create Python virtual environment (once)
#   2.   $> python3 -m venv openstacksdk.venv
# Activate virtual environment.
#   3.   $> source openstacksdk.venv/bin/activate
# Install OpenStack SDK (once).
#   4.   $> pip3 install openstacksdk
#        $> pip3 install ruamel.yaml
# NOTE: Openstack RC file must be sourced first to be able to use Openstack API from SDK:
#   5. Login to OpenStack web interface -> API Access -> click the "Download Openstack RC File" button.
#   6. Source the downloaded file. E.g.:
#        $> source ./UMCG_HPC-openrc.sh
# Configure this repo for deployment of a specifc HPC cluster.
#   7. Source lor-init from this repo. E.g.:
#        $> source ./lor-init
#   8. Configure League of Robots for a specific cluster. E.g.:
#        $> lor-config nibbler
#   9. Execute playbook to create VMs. E.g.:
#        $> ansible-playbook -i static_inventories/nibbler_hosts.ini deploy-os_servers.yml
#
---
- name: 'Sanity checks before we start.'
  hosts: localhost
  connection: local
  pre_tasks:
    - name: 'Verify Ansible version meets requirements.'
      assert:
        that: "ansible_version.full is version_compare('2.10', '>=')"
        msg: 'You must update Ansible to at least 2.10.x to use this playbook.'

##############################################################################
# Configure jumphosts from inventory using Openstack API.
##############################################################################
- name: Create jumphosts.
  hosts: jumphost
  connection: local
  vars:
    #
    # Disable Ansible's interpretor detection logic,
    # which would fail to use the interpretor from an activated virtual environment.
    #
    - ansible_python_interpreter: python
  tasks:
    - name: Log the public keys of the admins.
      debug:
        msg: "{{ public_keys_of_local_admins }}"
#     - name: "Create persistent data volume for jumphost '{{ inventory_hostname }}'"
#       os_volume:
#         display_name: "{{ inventory_hostname }}-volume"
#         size: 5
#         state: present
#         availability_zone: "{{ storage_availability_zone | default('nova') }}"
    - name: "Create jumphost '{{ inventory_hostname }}'"
      os_server:
        state: present
        name: "{{ inventory_hostname }}"
        image: '{{ cloud_image }}'
        flavor: '{{ flavor_jumphost }}'
        security_groups: '{{ security_group_id }}'
        #key_name: '{{ key_name }}'
        auto_floating_ip: no
        nics: 
          - net-name: '{{ network_id_public }}'
          - net-name: '{{ network_id_private_management }}'
        userdata: |
          #cloud-config
          #
          # Add each entry to ~/.ssh/authorized_keys for the configured user
          # or the first user defined in the user definition directive.
          #
          ssh_authorized_keys:
          {% for public_key in public_keys_of_local_admins %}  - {{ public_key }}{% endfor %}
        availability_zone: '{{ availability_zone }}'
      register: jumphost_vm
    - name: Tot hier en niet verder
      meta: end_play

##############################################################################
# Configure UIs from inventory using Openstack API.
##############################################################################
- name: Deploying headnode.
  hosts: user_interface_jes
  connection: local
  tasks:
  - set_fact:
      name: Get headnode name.
      headnode_name: "{{ item }}"
    with_items:
      - "{{ groups['user_interface'] }}"

  - name: create persistent data volume for headnode
    os_volume:
      display_name: "{{ headnode_name }}-volume"
      size: 20
      state: present
      availability_zone: '{{ storage_availability_zone }}'

  - name: Create headnode instance
    os_server:
      state: present
      name: "{{ headnode_name }}"
      image: '{{ cloud_image }}'
      flavor: '{{ flavor_ui }}'
      security_groups: '{{ security_group_id }}'
      #key_name: '{{ key_name }}'
      auto_floating_ip: no
      nics: 
        - net-name: '{{ private_net_id }}'
        - net-name: '{{ private_storage_net_id }}'
      availability_zone: '{{ availability_zone }}'
    register: headnode_vm

  - name: attach headnode data volume
    os_server_volume:
      server: "{{ headnode_name }}"
      volume: "{{ headnode_name }}-volume"

  - name: associated floating IP to headnode.
    os_floating_ip:
      network: '{{ public_net_id  }}'
      server: "{{ headnode_name }}"
      reuse: yes
    register: floating_ip
    
  - name: add headnode to inventory
    add_host:
      name: "{{ headnode_name }}"
      groups: headnode
      ansible_ssh_host: "{{ headnode_vm.openstack.accessIPv4 }}"
      private_ip: "{{ headnode_vm.server.addresses['Solve-RD_private'] | map(attribute='addr') | list | first }}"
      ansible_ssh_user: "{{ cloud_user }}"
      public_ip: "{{ headnode_vm.openstack.accessIPv4 }}"
      
##############################################################################
# Configure vnode from inventory group 'compute_vm' using Openstack API.
##############################################################################
- name: Deploying vcompute nodes.
  hosts: 
    - compute_vm
  connection: local
  tasks:
  - name: create persistent data volume for vcompute nodes.
    os_volume:
      display_name: "{{ inventory_hostname }}-volume"
      size: "{{ local_volume_size }}"
      state: present
      availability_zone: "{{ storage_availability_zone }}"

- name: Create vcompute instance
  hosts: 
    - user_interface
  connection: local
  tasks:
  - name: Create instance
    os_server:
      state: present
      name: '{{ item }}'
      image: '{{ cloud_image }}'
      flavor: '{{ flavor_vcompute }}'
      security_groups: '{{ security_group_id }}'
      key_name: '{{ key_name }}'
      auto_floating_ip: no
      nics: 
        - net-name: '{{ private_net_id }}'
        - net-name: '{{ private_storage_net_id }}'
      availability_zone: '{{ availability_zone }}'
    register: vcompute_vm
    with_items:
      - "{{ groups['compute_vm'] }}"
 
  - name: add node to inventory
    add_host:
      name: "{{item.openstack.name}}"
      groups: nodes
      ansible_ssh_host: "{{ item.server.addresses['Solve-RD_private'] }}"
      private_ip: "{{ item.server.addresses['Solve-RD_private'] | map(attribute='addr') | list | first }}"
      ansible_ssh_user: "{{ cloud_user }}"
    with_items: "{{ vcompute_vm.results }}"
      
- name: attach vcompute data volume
  connection: local
  hosts: 
    - compute_vm
  tasks:
  - name: attach vcompute data volume
    os_server_volume:
      server: "{{ inventory_hostname }}"
      volume: "{{ inventory_hostname }}-volume"

#############################################################################
# Configure DAI and SAI from inventory using Openstack API.
#############################################################################

  - name: Create persistent data volumes for admin interface machines.
    os_volume:
      display_name: "{{ item }}-volume"
      size: 20
      state: present
      availability_zone: '{{ storage_availability_zone }}'
    with_items:
      - "{{ groups['deploy_admin_interface'] }}"
      - "{{ groups['sys_admin_interface'] }}"

  - name:  Create admin interface machines.
    os_server:
      state: present
      name: "{{ item }}"
      image: '{{ cloud_image }}'
      flavor: '{{ flavor_management }}'
      security_groups: '{{ security_group_id }}'
      key_name: '{{ key_name }}'
      auto_floating_ip: no
      nics:
        - net-name: '{{ private_net_id }}'
        - net-name: '{{ private_storage_net_id }}'
      availability_zone: '{{ availability_zone }}'
    register: managment_vm
    with_items:
      - "{{ groups['deploy_admin_interface'] }}"
      - "{{ groups['sys_admin_interface'] }}"

  - name: attach managment data volume
    os_server_volume:
      server: "{{ item }}"
      volume: "{{ item }}-volume"
    with_items:
      - "{{ groups['deploy_admin_interface'] }}"
      - "{{ groups['sys_admin_interface'] }}"

  - name: add node to inventory
    add_host:
      name: "{{item.openstack.name}}"
      groups: nodes
      ansible_ssh_host: "{{ item.server.addresses['Solve-RD_private'] }}"
      private_ip: "{{ item.server.addresses['Solve-RD_private'] | map(attribute='addr') | list | first }}"
      ansible_ssh_user: "{{ cloud_user }}"
    with_items: "{{ managment_vm.results }}"

##############################################################################
# List IPs addresses for/etc/hosts from in-memory inventory
##############################################################################

- name: List private ip addresses for roles/static_hostname_lookup/templates/{cluster}_hosts
  hosts: localhost
  connection: local
  tasks:
    - debug:  msg="{{ hostvars[item]['private_ip'] }}           {{ item }}"
      with_items:
        - "{{ groups['cluster'] }}"
        - "{{ groups['jumphost'] }}"
